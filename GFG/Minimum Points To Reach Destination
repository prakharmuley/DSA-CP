class Solution {
    int dfs( int i, int j,int n, int m, int[][] dp, int[][] points)
    {
       if(i==n-1&&j==m-1) return Math.min(points[i][j],0);
       if(i>=n||j>=m) return Integer.MIN_VALUE;
       if(dp[i][j]!=-1) return dp[i][j];
       int l=dfs(i+1,j,n,m,dp,points);
       int r=dfs(i,j+1,n,m,dp,points);
       int ans=points[i][j]+Math.max(l,r);
       return dp[i][j]=Math.min(ans,0);
    }
    
    public int minPoints(int points[][], int m, int n) {
       int l=1;
       int r=0;
       int[][] dp=new int[m+1][n+1];
       for(int i=0;i<=m;i++) Arrays.fill(dp[i],-1);
       int v=dfs(0,0,m,n,dp,points);
       return v==0?1:Math.abs(v-1);
       
    }
}
