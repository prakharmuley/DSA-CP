class Solution {
    
    static boolean isP(int[] stations, int n, int k, double mid) {
        int requiredStations = 0;

        for (int i = 1; i < n; i++) {
            double distance = stations[i] - stations[i - 1];
            requiredStations += Math.ceil(distance / mid) - 1; // Calculate the number of stations needed
        }

        return requiredStations <= k;
    }
    public static double findSmallestMaxDist(int a[], int k) {
        // code here
        double l=0d;
        int diff=a[1]-a[0];
        for(int i=1;i<a.length;i++)
        {
            diff=Math.max(diff,a[i]-a[i-1]);
        }
        int n=a.length;
        double r=diff;
        while(r-l>1e-6)
        {
            double m=(l+r)/2d;
            if(isP(a,n,k,m)) r=m;
            else l=m;
        }
        return Math.round(r*100.0)/100.0;
    }
}
