//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            int n = Integer.parseInt(br.readLine().trim());
            String s = br.readLine();
            String[] S = s.split(" ");
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(S[i]);
            }
            Solution ob = new Solution();
            System.out.println(ob.maxXor(arr));

            System.out.println("~");
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    public int maxXor(int[] arr) {
        // code here
        Trie trie=new Trie();
        int ans=0;
        int N=arr.length;

        for(int i=0;i<N;i++) trie.insert(arr[i]);
        for(int i=0;i<N;i++)
        {
            ans=Math.max(ans,trie.findMax(arr[i]));
        }
        return ans;
        
    }
}
class Node {
    Node[] child;
    public Node() {
        child = new Node[2];
    }
}

class Trie {
    Node root;
    public Trie() {
        root = new Node();
    }

    public void insert(int num) {
        Node node = root;
        for (int i = 31; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node.child[bit] == null) {
                node.child[bit] = new Node();
            }
            node = node.child[bit];
        }
    }

    public int findMax(int num) {
        Node node = root;
        int ans = 0;
        for (int i = 31; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node.child[1-bit] != null) {
                node = node.child[1-bit];
                ans|=(1<<i);
            } else {
                node = node.child[bit];
            }
        }
        return ans;
    }
}
