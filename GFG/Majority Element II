//{ Driver Code Starts
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine(); // Consume the newline character

        while (t-- > 0) {
            String s = sc.nextLine();
            String[] parts = s.split(" ");
            int[] nums = new int[parts.length];
            for (int i = 0; i < parts.length; i++) {
                nums[i] = Integer.parseInt(parts[i]);
            }
            Solution ob = new Solution();
            List<Integer> ans = ob.findMajority(nums);

            if (ans.size() == 0) {
                System.out.println("[]");
            } else {
                for (int i : ans) {
                    System.out.print(i + " ");
                }
                System.out.println();
            }
        }
        sc.close();
    }
}

// } Driver Code Ends


class Solution {
    // Function to find the majority elements in the array
    public List<Integer> findMajority(int[] nums) {
        // Your code goes here.
         List<Integer>ans=new ArrayList<>();
        int n=nums.length,cand1=-1,cand2=-1,counter1=0,counter2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==cand1){
                counter1++;
            }else if(nums[i]==cand2){
                counter2++;
            }else if(counter1==0){
                cand1=nums[i];
                counter1++;
            }else if(counter2==0){
                cand2=nums[i];
                counter2++;
            }else {
                counter1--;
                counter2--;
            }
        }
        // now cand1 and cand2 is the potential winner so at last 
        // veriry wheather they are majority element or not;
        int count1=0,count2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==cand1) count1++;
            else if(nums[i]==cand2) count2++;
        }
        if(count1>(n/3)) ans.add(cand1);
        if(count2>(n/3)) ans.add(cand2);
        // sort the elements of ans vector (there will be maximum 2 elements so no issue for the time complexity)
        Collections.sort(ans);  
        // finally return the ans;
        if(ans.size()==0){
            
            return ans;
        }
        return ans;
    }
}
