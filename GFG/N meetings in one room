//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);

            int start[] = new int[n];
            int end[] = new int[n];

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) start[i] = Integer.parseInt(inputLine[i]);

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) end[i] = Integer.parseInt(inputLine[i]);

            int ans = new Solution().maxMeetings(n, start, end);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


class Solution {
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    public int maxMeetings(int n, int start[], int end[]) {
        // add your code here
         int[][] meetings = new int[n][2];
        for (int i = 0; i < n; i++) {
            meetings[i][0] = start[i]; // Start time
            meetings[i][1] = end[i]; // End time
        }

        // Sort meetings based on their end times
        Arrays.sort(meetings, new Comparator<int[]>() {
            public int compare(int[] m1, int[] m2) {
                return m1[1] - m2[1]; // Sort by end time
            }
        });

        // Initialize variables to track the count of meetings and the end time of the last meeting
        int count = 0;
        int lastEndTime = 0;

        // Iterate through sorted meetings
        for (int i = 0; i < n; i++) {
            // If the start time of the current meeting is greater than the end time of the last selected meeting
            if (meetings[i][0] > lastEndTime) {
                count++; // Increment the count of meetings
                lastEndTime = meetings[i][1]; // Update the end time of the last selected meeting
            }
        }

        return count;
    }
}
