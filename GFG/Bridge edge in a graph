//{ Driver Code Starts
import java.util.*;


// } Driver Code Ends

class Solution {
    public void dfs(int node, List<Integer>[] adj, int c, int d, boolean[] vis)
    {
        vis[node]=true;
        for(int x: adj[node])
        {
            if((x==c&&node==d)||(x==d&&node==c)) continue;
            if(!vis[x])
            {
                dfs(x,adj,c,d,vis);
            }
        }
    }
    public boolean isBridge(int V, int[][] edges, int c, int d) {
        List<Integer>[] adj=new ArrayList[V];
        for(int i=0;i<V;i++) adj[i]=new ArrayList<>();
        for(int[] e: edges) 
        {
            adj[e[0]].add(e[1]);
            adj[e[1]].add(e[0]);
        }
        boolean[] vis=new boolean[V];
        dfs(c,adj,c,d,vis);
        return !vis[d];
        
    }
}


//{ Driver Code Starts.

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = Integer.parseInt(sc.nextLine().trim());
        while (t-- > 0) {
            // V and E on separate lines
            int V = Integer.parseInt(sc.nextLine().trim());
            int E = Integer.parseInt(sc.nextLine().trim());

            // Using a 2D array to store edges.
            int[][] edges = new int[E][2];
            for (int i = 0; i < E; i++) {
                // Use split("\\s+") to handle one or more whitespace characters
                String[] parts = sc.nextLine().trim().split("\\s+");
                edges[i][0] = Integer.parseInt(parts[0]);
                edges[i][1] = Integer.parseInt(parts[1]);
            }

            // c and d on separate lines
            int c = Integer.parseInt(sc.nextLine().trim());
            int d = Integer.parseInt(sc.nextLine().trim());

            Solution obj = new Solution();
            boolean result = obj.isBridge(V, edges, c, d);
            System.out.println(result ? "true" : "false");
            System.out.println("~");
        }

        sc.close();
    }
}
// } Driver Code Ends
