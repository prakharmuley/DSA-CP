class Tree {
    public ArrayList<Integer> diagonal(Node root) {
        // add your code here.
          ArrayList<Integer> ans = new ArrayList<>();
           Queue<Node> q = new LinkedList<>();
           q.add(root);
           while(q.size()>0){
               Node curr = q.remove();
               while(curr !=null){
                   ans.add(curr.data);
                    if(curr.left !=null){
                        q.add(curr.left);
                    }
                    curr = curr.right;
               }
           }
           return ans;
    }
}class Tree {class Tree {
    public ArrayList<Integer> diagonal(Node root) {
        // add your code here.
          ArrayList<Integer> ans = new ArrayList<>();
           Queue<Node> q = new LinkedList<>();
           q.add(root);
           while(q.size()>0){
               Node curr = q.remove();
               while(curr !=null){
                   ans.add(curr.data);
                    if(curr.left !=null){
                        q.add(curr.left);
                    }
                    curr = curr.right;
               }
           }
           return ans;
    }
}
    public ArrayList<Integer> diagonal(Node root) {
        // add your code here.
          ArrayList<Integer> ans = new ArrayList<>();
           Queue<Node> q = new LinkedList<>();
           q.add(root);
           while(q.size()>0){
               Node curr = q.remove();
               while(curr !=null){
                   ans.add(curr.data);
                    if(curr.left !=null){
                        q.add(curr.left);
                    }
                    curr = curr.right;
               }
           }
           return ans;
    }
}
