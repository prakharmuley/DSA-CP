//{ Driver Code Starts
import java.io.*;
import java.util.*;

class IntArray {
    public static int[] input(BufferedReader br, int n) throws IOException {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for (int i = 0; i < n; i++) a[i] = Integer.parseInt(s[i]);

        return a;
    }

    public static void print(int[] a) {
        for (int e : a) System.out.print(e + " ");
        System.out.println();
    }

    public static void print(ArrayList<Integer> a) {
        for (int e : a) System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while (t-- > 0) {

            int n;
            n = Integer.parseInt(br.readLine());

            int[] A = IntArray.input(br, n);

            int[] B = IntArray.input(br, n);

            int x;
            x = Integer.parseInt(br.readLine());

            int y;
            y = Integer.parseInt(br.readLine());

            Solution obj = new Solution();
            long res = obj.maximizeHealth(n, A, B, x, y);

            System.out.println(res);
        }
    }
}

// } Driver Code Ends



class Solution {
    public static long maximizeHealth(int n, int[] a, int[] b, int x, int y) {
        // code here
        long[] pre=new long[a.length+1];
        PriorityQueue<Long> pq=new PriorityQueue<>();
        long sum=0L,ans=0L;;
        for(int i=0;i<a.length;i++)
        {
            if(a[i]>=0) 
            {
                sum+=a[i]*1L;
                pq.offer((long)a[i]);
                if(pq.size()>x)
                {
                    sum-=(long)pq.poll();
                }
            }
            pre[i+1]=sum;
        }
        pq.clear();
        sum=0L;
        ans=pre[a.length];
        for(int i=b.length-1;i>=0;i--)
        {
            if(b[i]>=0) 
            {
                sum+=b[i]*1L;
                pq.offer((long)b[i]);
                if(pq.size()>y)
                {
                    sum-=(long)pq.poll();
                }
            }
            ans=Math.max(ans,pre[i]+sum);
        }
          return ans;

    }
}
