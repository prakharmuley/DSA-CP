class Solution
{
    //Function to find most frequent word in an array of strings.
    public String mostFrequentWord(String arr[],int n)
    {
        Trie trie=new Trie();
        for(int i=0;i<n;i++) trie.insert(arr[i],i);
        int mx=0;
        int lst=-1;
        String res=null;
        for(int i=0;i<n;i++)
        {
            Node node=trie.mp.get(arr[i]);
            if(node.freq>mx)
            {
                mx=node.freq;
                res=arr[i];
                lst=i;
            }
            else if(node.freq==mx)
            {
                if(node.idx>lst)
                {
                    lst=node.idx;
                    res=arr[i];
                }
            }
        }
        return res;
    }
    

}
class Trie{
    Node root;
    Map<String,Node> mp=new HashMap<>();
    public Trie()
    {
        root=new Node();
    }
    public void insert(String word, int index)
    {
        Node node=root;
        for(char c: word.toCharArray())
        {
            if(node.child[c-'a']==null)
            {
                node.child[c-'a']=new Node();
               
            }
            node=node.child[c-'a'];
            
        }
        node.end=true;
        if(node.freq==0)
        {
            node.idx=index;
        }
         node.freq++;
         mp.put(word,node);
    }
    
    public boolean search(String word)
    {
        Node cur=root;
        for(char c: word.toCharArray())
        {
            if(cur.child[c-'a']==null)
            {
                return false;
               
            }
            cur=cur.child[c-'a'];
        }
        return cur.end;
    }
}
class Node{
    Node[] child;
    boolean end;
    int freq;
    int idx;
    public Node()
    {
        child=new Node[26];
        end=false;
        freq=0;
        idx=-1;
    }
}
