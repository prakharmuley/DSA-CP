import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.SortedMap;
import java.util.StringTokenizer;
import java.util.TreeMap;
 
 
 
import java.text.DecimalFormat;
 
 
 
 
public class Main {
 
	public static void main(String[] args) throws Exception {
 
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		solve(in, out);
		out.close();
	}
	
	
	public static boolean check(int st, int end, boolean[][] vis, int n, int m)
	{
		if(st<0||end<0||st>=n&&end>=m) return true;
		
		return true;
	}
	   public static long fun(int n)
	   {
	       int p=0;
	        while(n>0)
	        {
	         n/=2;
	         p++;
	        }
	        return 1<<(p-1);
	   }
	   static int _gcd(int a, int b) {
			if (b == 0)
				return a;
			return _gcd(b, a % b);
		}
	   static boolean isPrime(int n) {
			if (n <= 1)
				return false;
			if (n <= 3)
				return true;
			if (n % 2 == 0 || n % 3 == 0)
				return false;
			for (int i = 5; i * i <= n; i = i + 6)
				if (n % i == 0 || n % (i + 2) == 0)
					return false;
			return true;
		}
	   
	public static void solve(InputReader sc, PrintWriter pw) {
		int n=sc.nextInt();
		if(n<=3&&n!=1)
		{
			pw.print("NO SOLUTION");
		}
		else {
			int n1=2;
			int n2=1;
			int i=0;
			int t=n1;
			while(i<n)
			{
				if(t>n)
				{
					t=n2;
				}
				pw.print(t+" ");
				t+=2;
				i++;
			}
		}
			
			
	
		        		
		        
			
		
	} 		
    	
    	
    		
    			
       
		
 
    		
    				
 	  
 
 
 
	
 
	
 
	static class InputReader {
		public BufferedReader reader;
		public StringTokenizer tokenizer;
 
		public InputReader(InputStream stream) {
			reader = new BufferedReader(new InputStreamReader(stream), 32768);
			tokenizer = null;
		}
 
		public String nextLine() {
			return null;
		}
 
		public String next() {
			while (tokenizer == null || !tokenizer.hasMoreTokens()) {
				try {
					tokenizer = new StringTokenizer(reader.readLine());
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			}
			return tokenizer.nextToken();
		}
 
		public int nextInt() {
			return Integer.parseInt(next());
		}
 
		public long nextLong() {
			return Long.parseLong(next());
		}
 
}
}
