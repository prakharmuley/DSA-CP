class Solution {
     static int findFloor(int[] arr, int low, int x, int high) {
        
        int ans =arr.length;


        while (low <= high) {
            int mid = (low + high) / 2;
            // maybe an answer
            if (arr[mid] >= x) {
                ans =mid;
                //look for smaller index on the left
                high = mid - 1;
            } else {
                low = mid + 1; // look on the right
            }
        }
        return ans;
     }
    public static ArrayList<Integer> queriesAndCandyDistribution(int n, int m, int q,
                                                                 int[][] a,
                                                                 int[] query) {
        // code here
        
        int[] arr=new int[n+1];
        for(int i=0;i<m;i++) 
        {
           int l=a[i][0];
           int r=a[i][1];
           arr[l-1]+=a[i][2];
           if(r<n)
            arr[r]-=a[i][2];
        }
        for(int i=1;i<n;i++)
        {
            arr[i]+=arr[i-1];
        }
        arr[n]=0;
        ArrayList<Integer> ll=new ArrayList<>();
        Arrays.sort(arr);
        int j=0;
        
        for(int x: query)
        {
            int ans=findFloor(arr,1,x,n);
            ll.add(n-ans+1);
            
        }
        return ll;
        
    }
}
