class Solution {
    private void calculateDP(String source, String pattern, int n, int m, int[] dp, boolean[] isTarget) {
        for (int i = 0; i < n; i++) {
            for (int j = m; j > 0; j--) {
                if (source.charAt(i) == pattern.charAt(j - 1) && dp[j - 1] != Integer.MAX_VALUE) {
                    dp[j] = Math.min(dp[j], dp[j - 1] + (isTarget[i] ? 1 : 0));
                }
            }
        }
    }
    
    private boolean[] createTargetArray(int[] targetIndices, int n) {
        boolean[] isTarget = new boolean[n];
        for (int index : targetIndices) {
            isTarget[index] = true;
        }
        return isTarget;
    }
    
    private int[] initializeDP(int m) {
        int[] dp = new int[m + 1];
        for (int i = 0; i <= m; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
        dp[0] = 0;
        return dp;
    }
    private int calculateResult(int targetSize, int lastDPValue) {
        return targetSize - (lastDPValue == Integer.MAX_VALUE ? 0 : lastDPValue);
    }
    
    public int maxRemovals(String source, String pattern, int[] targetIndices) {
        int n = source.length();
        int m = pattern.length();
        int[] dp = initializeDP(m);
        boolean[] isTarget = createTargetArray(targetIndices, n);
        calculateDP(source, pattern, n, m, dp, isTarget);
        return calculateResult(targetIndices.length, dp[m]);
    }
}
