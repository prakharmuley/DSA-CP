//DFS Approach

class Solution {
    public void dfs(Node root)
    {
        if(root==null) return ;
        if(root.left==null) return;
    
        root.left.next=root.right;
        if(root.next!=null)
        {
            root.right.next=root.next.left;
        }
        dfs(root.left);
        dfs(root.right);
        
    }
    public Node connect(Node root) {
        dfs(root);
        return root;
    }


//BFS approach
public Node connect(Node root) {
     //   dfs(root);
        Queue<Node> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty())
        {
           
            int l=q.size();
            Node prev=null;
            for(int i=0;i<l;i++)
            {
                Node cur=q.poll();
                if(cur==null) continue;
                if(cur.left!=null)
                {
                    cur.left.next=cur.right;
                    q.offer(cur.left);
                }
                if(cur.right!=null)
                {
                    q.offer(cur.right);
                    if(cur.right.next==null&&cur.next!=null)
                    {
                        cur.right.next=cur.next.left;
                    }
                }
             
            }
            
        }
        return root;
    }


}
