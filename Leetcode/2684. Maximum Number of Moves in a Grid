class Solution {
    int ans=0;
    public int dfs(int i, int j, int[][] dp, int[][] grid, int[] c)
    {
        if(i<0||i>=grid.length||j>=grid[0].length) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int x=0,y=0,z=0;
        if(i-1>=0&&j+1<grid[0].length)
        {
            if(grid[i-1][j+1]>grid[i][j])
            {
                x= 1+dfs(i-1,j+1,dp,grid,c);
               
            }
        }
        if(j+1<grid[0].length)
        {
            if(grid[i][j+1]>grid[i][j])
            {
               y=1+dfs(i,j+1,dp,grid,c);
            }
        }
        if(i+1<grid.length&&j+1<grid[0].length)
        {
            if(grid[i+1][j+1]>grid[i][j])
            {
                c[0]++;
               z=1+dfs(i+1,j+1,dp,grid,c);
            }
        }
       return dp[i][j]=Math.max(Math.max(x,y),z);
       


    }
    public int maxMoves(int[][] grid) {
        int[][] dp=new int[grid.length+1][grid[0].length+1];
        for(int i=0;i<=grid.length;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        for(int i=0;i<grid.length;i++)
        {
          //  dp[i][0]=0;
            int[] c=new int[1];
            c[0]=dfs(i,0,dp,grid,c);
            ans=Math.max(ans,c[0]);
        }
        return ans;
    }
}
