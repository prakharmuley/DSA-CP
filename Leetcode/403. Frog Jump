class Solution {
    public static class Pair{
            int vertex;
            int weight;
        public Pair(int vertex,int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
        @Override
        public int hashCode() {
            return Objects.hash(vertex,weight);
        }

        @Override
        public boolean equals(Object obj) {
            if(obj.getClass() != this.getClass()){
                return false;
            }
            Pair pair = (Pair) obj;
            return pair.vertex == this.vertex && pair.weight == this.weight;
        }
    }
        public boolean canCross(int[] stones) {
            Set<Integer> set = new HashSet<>();
            for (int stone : stones) {
                set.add(stone);
            }
            if(stones[1] != 1) return false;
            Queue<Pair> queue = new LinkedList<>();
            queue.add(new Pair(stones[1],1));
            Set<Pair> visited = new HashSet<>();
            visited.add(new Pair(stones[1],1));
            while(!queue.isEmpty()){
                Pair top = queue.poll();
                int vertex = top.vertex;
                if(vertex == stones[stones.length - 1]) return true;
                int weight = top.weight;
                for(int j = weight-1 ; j <= weight + 1 ;++j){
                    if(j != 0 && set.contains(vertex + j) && !visited.contains(new Pair(vertex+j,j))){
                        visited.add(new Pair(vertex+j,j));
                        queue.add(new Pair(vertex+j,j));
                    }
                }
            }
            return false;
    }
}
