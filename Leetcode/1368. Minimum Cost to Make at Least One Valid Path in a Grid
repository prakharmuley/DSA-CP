class Solution {
    public int minCost(int[][] grid) {
        Deque<int[]> q=new ArrayDeque<>();
        int n=grid.length;
        int m=grid[0].length;
        q.offerFirst(new int[]{0,0,0});
        int[][] dir=new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        int[][] dp=new int[n][m];
      
        for(int[] d: dp) Arrays.fill(d,Integer.MAX_VALUE);
          dp[0][0]=0;
        while(!q.isEmpty())
        {
            int[] p=q.pollFirst();
            int x=p[0];
            int y=p[1]; 
            int cost=p[2];
            if(x==n-1&&y==m-1) return cost;
            for(int i=0;i<4;i++)
            {
                int r=x+dir[i][0];
                int c=y+dir[i][1];
                int val=grid[x][y]==(i+1)?0:1;
                if(r<0||r>=n||c<0||c>=m) continue;
                if(val+cost<dp[r][c])
                {
                    dp[r][c]=val+cost;
                    if(val==0)
                     q.offerFirst(new int[]{r,c,dp[r][c]});
                    else
                     q.offerLast(new int[]{r,c,dp[r][c]});
                }
            } 
        }
        return dp[n-1][m-1];
    }
}
