/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class FindElements {
     TreeNode node;
     int v;
     Queue<TreeNode> q;
     Set<Integer> hs;
     public void bfs(Queue<TreeNode> q, TreeNode node, Set<Integer> hs)
     {
         q.offer(node);
         node.val=0;
         hs.add(0);
         while(!q.isEmpty())
         {
                TreeNode n=q.poll();
                int c=n.val;
                if(n.left!=null) {q.offer(n.left); n.left.val=2*c+1; hs.add(2*c+1); }
                if(n.right!=null) {q.offer(n.right); n.right.val=2*c+2; hs.add(2*c+2);}

         }
     }
    public FindElements(TreeNode root) {
        node=new TreeNode();
        node=root;
        q=new LinkedList<>();
        hs=new HashSet<>();
        bfs(q,node,hs);
        
    }
    
    public boolean find(int target) {
        return hs.contains(target);
    }
}

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements obj = new FindElements(root);
 * boolean param_1 = obj.find(target);
 */
