class Solution {
    public int countCompleteComponents(int n, int[][] edges) {
        DSU dsu = new DSU(n);
         for (int[] edge : edges) {
            dsu.bySize(edge[0], edge[1]);
        }

         int completeComponents = 0;
        for (int i = 0; i < n; i++) {
            if (dsu.findPar(i) == i) { 
                int nodes = dsu.size[i]; 
                int expectedEdges = nodes * (nodes - 1) / 2; 
                if (dsu.edge[i] == expectedEdges) {
                    completeComponents++;
                }
            }
        }
        return completeComponents;
    }
}
class DSU{
    int[] edge;
    int[] size;
    int[] par;
    public DSU(int n)
    {
        par=new int[n];
        size=new int[n];
        edge=new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i; 
            size[i] = 1;   
        }
    }
         public int findPar(int x) {
        if (par[x] != x) {
            par[x] = findPar(par[x]); 
        }
        return par[x];
    }

        public void bySize(int a, int b)
        {
            int x=findPar(a);
            int y=findPar(b);
            if(x!=y)
            {
                if(size[x]>size[y])
                {
                    size[x]+=size[y];
                    edge[x]+=edge[y];
                    par[y]=x;
                }
                else
                {
                    par[x]=y;
                    size[y]+=size[x];
                    edge[y]+=edge[x];
                    x=y;
                }
            }
            edge[x]++;
        }

}
