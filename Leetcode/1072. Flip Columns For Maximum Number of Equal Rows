class Solution {
    public int maxEqualRowsAfterFlips(int[][] mat) {
      int n = mat.length, m = mat[0].length;
        int ans = 0;
        Map<String, Integer> map = new HashMap<>();

        for (int[] row : mat) {
            StringBuilder bin = new StringBuilder();
            StringBuilder invBin = new StringBuilder();

            for (int val : row) {
                bin.append(val == 0 ? '0' : '1');
                invBin.append(val == 0 ? '1' : '0');
            }

            String binStr = bin.toString();
            String invBinStr = invBin.toString();

            map.put(binStr, map.getOrDefault(binStr, 0) + 1);
            map.put(invBinStr, map.getOrDefault(invBinStr, 0) + 1);

            ans = Math.max(ans, Math.max(map.get(binStr), map.get(invBinStr)));
        }

        return ans;  
    }
}

class Solution {
    public long maxMatrixSum(int[][] matrix) {
         int m = matrix.length, n = matrix[0].length;
        long total = 0;
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                minHeap.add(matrix[i][j]);
                total += matrix[i][j];
            }
        }

        while (!minHeap.isEmpty()) {
            int min1 = minHeap.poll();
            int min2 = minHeap.poll();

            if (-min1 + -min2 <= 0) {
                return total;
            }

            total += -2L * min1 + -2L * min2;
            minHeap.add(-min1);
            minHeap.add(-min2);
        }

        return 0;
    }
}
class Solution {
    public long maxMatrixSum(int[][] matrix) {
         int m = matrix.length, n = matrix[0].length;
        long total = 0;
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                minHeap.add(matrix[i][j]);
                total += matrix[i][j];
            }
        }

        while (!minHeap.isEmpty()) {
            int min1 = minHeap.poll();
            int min2 = minHeap.poll();

            if (-min1 + -min2 <= 0) {
                return total;
            }

            total += -2L * min1 + -2L * min2;
            minHeap.add(-min1);
            minHeap.add(-min2);
        }

        return 0;
    }
}
