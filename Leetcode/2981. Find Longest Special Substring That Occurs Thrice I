class Solution {
    public int maximumLength(String s) {
        Map<String,Integer> mp=new HashMap<>();
      //  for(char c: s.toCharArray()) mp.put(c,mp.getOrDefault(c,0)+1);
      
        for(int i=0;i<s.length();i++)
        {
            Set<Character> hs=new HashSet<>(); 
            for(int j=i;j<s.length();j++)
            {
                hs.add(s.charAt(j));
                if(hs.size()==1)
                 mp.put(s.substring(i,j+1),mp.getOrDefault(s.substring(i,j+1),0)+1);
            }
        }
        PriorityQueue<Map.Entry<String,Integer>> pq=new PriorityQueue<>((a,b)->b.getValue()-a.getValue());
        pq.addAll(mp.entrySet());
        int mx=-1;
        while(!pq.isEmpty())
        {
            Map.Entry<String,Integer> e=pq.poll();
            if(e.getValue()>=3) 
            {
               mx=Math.max(mx,e.getKey().length());
            }
           
           
        }
        return mx;
    }
}
