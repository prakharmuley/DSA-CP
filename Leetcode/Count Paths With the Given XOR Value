class Solution {
    int mod=(int)1e9+7;
    public long dfs(int i, int j, int n, int m, int k, int[][] a, long[][][] dp, int xor)
    {
        if(i<0||j<0||i>=n||j>=m) return 0;
          xor^=a[i][j];
        if(i==n-1&&j==m-1&&xor==k) return 1L;
        if(i==n-1&&j==m-1&&xor!=k) return 0L;   
        if(dp[i][j][xor]!=-1) return dp[i][j][xor];
        
        long r=dfs(i,j+1,n,m,k,a,dp,xor);
        long down=dfs(i+1,j,n,m,k,a,dp,xor);
        long ans=((r%mod)+(down%mod))%mod;
        return dp[i][j][xor]=ans;
        
    }
    public int countPathsWithXorValue(int[][] grid, int k) {
        int n=grid.length;
        int m=grid[0].length;
        long[][][] dp=new long[n+1][m+1][17];
        for(int i=0;i<=n;i++)
           for(int j=0;j<=m;j++) 
            Arrays.fill(dp[i][j],-1L);
        return (int)dfs(0,0,n,m,k,grid,dp,0);
    }
}
