import java.util.Arrays;

public class Solution {
    private int countSetBits(int num) {
        return Integer.bitCount(num);
    }

    public boolean canSortArray(int[] nums) {
        int n = nums.length;
        boolean swapped;

        for (int i = 0; i < n; ++i) {
            swapped = false;

            for (int j = 0; j < n - 1; ++j) {
                if (nums[j] > nums[j + 1]) {
                    if (countSetBits(nums[j]) != countSetBits(nums[j + 1])) {
                        return false;
                    }

                    int temp = nums[j];
                    nums[j] = nums[j + 1];
                    nums[j + 1] = temp;

                    swapped = true;
                }
            }

            // If no swaps were made in this pass, the array is already sorted.
            if (!swapped) {
                break;
            }
        }

        return true;
    }
}
