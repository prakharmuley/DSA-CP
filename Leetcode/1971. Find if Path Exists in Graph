class Solution {
  
    public boolean validPath(int n, int[][] edges, int start, int end) {
             ArrayList<Integer>[] adj = new ArrayList[n];
      
        boolean vis[]=new boolean[n];
        for(int i=0; i<n; i++){
            adj[i] = new ArrayList<>();
        }
      
        for(int i=0;i<edges.length;i++) {
            adj[edges[i][0]].add(edges[i][1]);
            adj[edges[i][1]].add(edges[i][0]);
        }
      
      Queue<Integer> q=new LinkedList<>();
            q.add(start);
              vis[start]=true;
            while(!q.isEmpty())
            { 
                int node=q.poll();
                for(int child: adj[node])
                {
                  if(!vis[child])
                  {
                      vis[child]=true;
                      q.add(child);
                    
                  }
                
                    
                }
            }
          
        
        //for(boolean b: vis) System.out.print(b+" ");
       
        
        return vis[start]==vis[end] ;
    }
}
