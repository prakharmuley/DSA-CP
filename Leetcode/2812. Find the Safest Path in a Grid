class Solution {
    int[] dir=new int[]{-1,0,1,0,-1};
    public void bfs(Queue<int[]> q, List<List<Integer>>  g, int[][] dis)
    {
        int n=g.size();
       
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(g.get(i).get(j)==1)
                {
                    q.offer(new int[]{i,j});
                    dis[i][j]=0;
                }
            }
        }
        
        while(!q.isEmpty())
        {
            int l=q.size();
            for(int i=0;i<l;i++)
            {
                int[] p=q.poll();
                for(int ii=0;ii<4;ii++)
                {
                  int x=p[0]+dir[ii];
                  int y=p[1]+dir[ii+1];
                  if(x>=0&&x<n&&y>=0&&y<n&&dis[x][y]>1+dis[p[0]][p[1]])
                  {
                         dis[x][y]=1+dis[p[0]][p[1]];
                         q.offer(new int[]{x,y});
                  }
                }
            }
        }

    }
    public int maximumSafenessFactor(List<List<Integer>> grid) {
        Queue<int[]> q=new LinkedList<>();
        int n=grid.size();
        int[][] dis=new int[n][n];
        for(int[] d: dis) Arrays.fill(d,Integer.MAX_VALUE);
        bfs(q,grid,dis);
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->b[0]-a[0]);
        pq.offer(new int[]{dis[0][0],0,0});
        
         boolean[][] vis=new boolean[n][n];
        while(!pq.isEmpty())
        {
            int[] p=pq.poll();
            int v=p[0];
            int c=p[2];
            int r=p[1];

            if(r==n-1&&c==n-1) return v;
             if (vis[r][c]) continue;
            vis[r][c] = true;
         
            for(int i=0;i<4;i++)
            {
                int x=r+dir[i];
                int y=c+dir[i+1];
                 if(x>=0&&x<n&&y>=0&&y<n&&!vis[x][y])
                 {
                 
                    int ans =Math.min(v, dis[x][y]);
                    pq.offer(new int[]{ans,x,y});
                 } 
            }
        }
        return 0;
    }
}
