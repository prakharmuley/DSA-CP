class Solution {
    public int dfs(int r, int c, int[][] a, int[][] dp)
    {
        if(r<0||c<0||r>=a.length||c>=a[0].length) return Integer.MAX_VALUE;
        if(dp[r][c]!=-1) return dp[r][c];
        if(r==a.length-1) return a[r][c];
        int sum=a[r][c];
        int min=Integer.MAX_VALUE;
        for(int i=0;i<a[0].length;i++)
        {
            if(i==c) continue;
            int val=dfs(r+1,i,a,dp);
            min=Math.min(min,val);
        }
        dp[r][c]=min+sum;
        return dp[r][c];
    }
    public int minFallingPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] dp=new int[n][m];
        for(int i=0;i<n;i++) Arrays.fill(dp[i],-1);
        int ans=Integer.MAX_VALUE;
        for(int i=0;i<m;i++)
        {
                ans=Math.min(ans,dfs(0,i,grid,dp));
        }
        return ans;
    }
}
