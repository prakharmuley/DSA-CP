class Solution {
    long binpow(long a, long b) {
    long res = 1;
    while (b > 0) {
        if (((b & 1) !=0 ))
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
    }
    public int bs(List<Long> list, long key)
    {
        int l=0,r=list.size();
        while(l<r)
        {
            int m=(l+r)/2;
            if(list.get(m)<=key) l=m+1;
            else r=m;
        }
        return l;
    }
 long fun(long left, long right, List<Long> list) {
    int len=list.size();
    long cur = left;
    long ans=0;
    while(cur<=right)
    {
        int ops=bs(list,cur);
        long inc=Math.min(binpow(4,ops)-1L,right)-cur+1;
        ans+=inc*ops*1L;
        cur=binpow(4,ops);
    }
    return (ans+1L)/2L;
  }
    public long minOperations(int[][] queries) {
        List<Long> list=new ArrayList<>();
        list.add(1L);
        long num=1L,ans=0L;
        while(num<=(int)1e9)
        {
            num*=4L;
            list.add(num);
        }
        for(int[] q: queries)
        {
            int l=q[0];
            int r=q[1];
            ans+=fun(l,r,list);
        }
        return ans;
    }
}
