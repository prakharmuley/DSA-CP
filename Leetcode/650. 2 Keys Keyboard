class Solution {
        int n;
    public int minSteps(int N) {
        n = N;
        return helper(1, 0, 0);
    }

    public int helper(int i, int copy, int pasteCount){
        
        // Base condition of exactly n A's
        if(i==n){
            return 0;
        }
        
        // when A's > n return large number to ensure it is not part of our answer
        if(i>n){
            return 10000;
        }
        
        
        // Initial State i.e copy = 0
        // choose to copy as paste is not possible
        if(copy==0){
            // pasteCount = curr number of A's
            // copy = 1 refers, we can perform paste
            return 1+helper(i, 1, i);
        }
        // Copy = 1
        //choose to paste and retain copy state so that we paste again in future
        int op1 = 1+helper(i+pasteCount, 1, pasteCount);
        //choose to paste and inverse copy state so that we can copy in next step
        int op2 = 1+helper(i+pasteCount, 0, 0);
        
        return Math.min(op1, op2);
    }
}
