class Solution {
    int[][] visited;
    int[][] directions = {{1,0}, {0,1}, {-1,0}, {0,-1}};
    
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        visited = new int[m][n];
        Queue<int[]> q = new LinkedList();
        
        for(int[] positions: walls)
        {
            int x = positions[0], y = positions[1];
            visited[x][y] = 2;
        }
        
        for(int[] positions: guards)
        {
            int x = positions[0], y = positions[1];
            visited[x][y] = 1;
            q.offer(new int[]{x, y});
        }
        
        while(!q.isEmpty())
        {
            int[] current = q.poll();
            for(int i = 0; i < 4; i++)
            {
                int x = current[0] + directions[i][0];
                int y = current[1] + directions[i][1];
                
                while(x < m && x > -1 && y < n && y > -1 && visited[x][y] != 1 && visited[x][y] != 2)
                {
                    visited[x][y] = -1;
                    x += directions[i][0];
                    y += directions[i][1];
                }
            }
        }
        
        int result = 0;
        for(int i = 0;  i < m; i++)
            for(int j = 0 ; j < n; j++)
                if(visited[i][j] == 0) result++;
        
        return result;
    }
}
