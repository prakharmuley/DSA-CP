class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int cmx=Integer.MIN_VALUE,cmn=Integer.MAX_VALUE;
        int[] sm=new int[2];
        PriorityQueue<int[]> pq=new PriorityQueue<>((x,y)->x[2]-y[2]);
        for(int i=0;i<nums.size();i++)
        {
            pq.offer(new int[]{i,0,nums.get(i).get(0)});
            cmx=Math.max(cmx,nums.get(i).get(0));
        }
         sm[0]=0;
         sm[1]=Integer.MAX_VALUE; 
        while(pq.size()==nums.size())
        {
            int[] p=pq.poll();
            int lidx=p[0];
            int lidcol=p[1];
            cmn=p[2];
             if(sm[1]-sm[0]>cmx-cmn)
                {
                    sm[1]=cmx;
                    sm[0]=cmn;
                }
            if(lidcol+1<nums.get(lidx).size())
            {
                pq.offer(new int[]{lidx,lidcol+1,nums.get(lidx).get(lidcol+1)});
                cmx=Math.max(nums.get(lidx).get(lidcol+1),cmx);
            }
            else break;
            
        }
        return sm;
    }

}
