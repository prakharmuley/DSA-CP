class Solution {
    public boolean isP(String word1, String word2) {
        if (word1.length() != word2.length()) return false;
        int diffCount = 0;
        for (int i = 0; i < word1.length(); i++)
            if (word1.charAt(i) != word2.charAt(i))
                diffCount++;
        return diffCount == 1;
    }

    public List<String> getWordsInLongestSubsequence(String[] w, int[] g) {
        int n=w.length;
        int[] dp=new int[n];
        int mx=0;
        int[] lis=new int[n];
        Arrays.fill(lis,1);
        Arrays.fill(dp,-1);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {

                if(g[i]!=g[j])
                {
                    if(isP(w[i],w[j])&&g[i]!=g[j]&&lis[i]<lis[j]+1)
                    {
                        lis[i]=lis[j]+1;
                        dp[i]=j;
                    
                    }
                }
            }
            if(lis[i]>mx)
            {
                mx=lis[i];
            }
        }
            
        List<String> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (lis[i] == mx) {
                while (i != -1) {
                    result.add(w[i]);
                    i = dp[i];
                }
                break;
            }
        }
        Collections.reverse(result);
        return result;
    }
}
