class Solution {
    int[] dir=new int[]{-1,0,1,0,-1};
    public boolean findSafeWalk(List<List<Integer>> grid, int h) {
     
        int n=grid.size();
        int m=grid.get(0).size();
           int[][] g=new int[n][m];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
                g[i][j]=grid.get(i).get(j);
        }
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->b[2]-a[2]);
       
        if(g[0][0]==1)
             pq.offer(new int[]{0,0,h-1});
        else if(g[0][0]==0)
            pq.offer(new int[]{0,0,h});
        
        g[0][0]=2;
        while(!pq.isEmpty())
        {
            int l=pq.size();
            for(int i=0;i<l;i++)
            {
                int[] p=pq.poll();
                int cr=p[0];
                int cc=p[1];
                int ch=p[2];
              
                if(cr==n-1&&cc==m-1&&ch>0) return true;
                for(int j=0;j+1<=4;j++)
                {
                    int nr=cr+dir[j];
                    int nc=cc+dir[j+1];
                    if(nr<0||nc<0||nr>=n||nc>=m||g[nr][nc]==2) continue;
                     
                    if(g[nr][nc]==0)
                    {
                        pq.offer(new int[]{nr,nc,ch});
                    }
                    if(g[nr][nc]==1)
                    {
                        pq.offer(new int[]{nr,nc,ch-1});
                    }
                   
                  g[nr][nc]=2;
                }
             //   if(ch<=0) return false;
            }
        }
        
        
        
        return false;
    }
}
